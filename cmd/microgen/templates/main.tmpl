package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/dreamsxin/go-kit/log"
	{{if .NeedMux}}
	"github.com/gorilla/mux"
	{{end}}
	{{range $service := .Services}}
	"{{$.ImportPath}}/service/{{$service.PackageName}}"
	{{end}}
)

func main() {
	// 命令行参数解析
	var (
		httpAddr = flag.String("http.addr", ":8080", "HTTP listen address")
	)
	flag.Parse()

	// 日志配置
	logger, err := log.NewDevelopment()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Log error: %v\n", err)
		os.Exit(1)
	}

	{{if .NeedMux}}
	// 创建主路由器
	r := mux.NewRouter()
	{{end}}

	// 注册所有服务
	{{range $index, $service := .Services}}
	// {{$service.ServiceName}}服务初始化
	{{$service.ServiceName | lower}}Svc := {{$service.PackageName}}.NewService()
	{{$service.ServiceName | lower}}Endpoints := {{$service.PackageName}}.MakeServerEndpoints({{$service.ServiceName | lower}}Svc)
	{{$service.ServiceName | lower}}Handler := {{$service.PackageName}}.NewHTTPHandler({{$service.ServiceName | lower}}Endpoints)

	// 注册带服务前缀的路由
	{{if $.NeedMux}}{{if eq $index 0}}
	subRouter := r.PathPrefix("/{{$service.ServiceName | lower}}").Subrouter()
	{{else}}
	subRouter = r.PathPrefix("/{{$service.ServiceName | lower}}").Subrouter()
	{{end}}
	subRouter.PathPrefix("/").Handler(http.StripPrefix("/{{$service.ServiceName | lower}}", {{$service.ServiceName | lower}}Handler))
	{{else if eq $index 0}}
	// 单服务直接使用处理器
	handler := {{$service.ServiceName | lower}}Handler
	{{end}}{{end}}

	// 优雅关闭
	errChan := make(chan error)
	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		errChan <- fmt.Errorf("received signal: %v", <-sigChan)
	}()

	go func() {
		logger.Sugar().Infof("HTTP server listening on %s", *httpAddr)
		{{if .NeedMux}}
		errChan <- http.ListenAndServe(*httpAddr, r)
		{{else}}
		errChan <- http.ListenAndServe(*httpAddr, handler)
		{{end}}
	}()

	// 等待退出信号
	logger.Sugar().Infof("exiting: %v", <-errChan)
}