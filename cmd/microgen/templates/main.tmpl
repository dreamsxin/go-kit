package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/dreamsxin/go-kit/log"
	"{{.ImportPath}}"
)

func main() {
	// 命令行参数解析
	var (
		httpAddr = flag.String("http.addr", ":8080", "HTTP listen address")
	)
	flag.Parse()

	// 日志配置
	logger, err := log.NewDevelopment()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Log error: %v\n", err)
		os.Exit(1)
	}

	// 服务初始化
	var svc {{.Service.PackageName}}.{{.Service.ServiceName}}

	svc = {{.Service.PackageName}}.NewService()

	// 端点创建
	endpoints := {{.Service.PackageName}}.MakeServerEndpoints(svc)

	// HTTP 传输层
	handler := {{.Service.PackageName}}.NewHTTPHandler(endpoints)

	// 优雅关闭
	errChan := make(chan error)
	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		errChan <- fmt.Errorf("received signal: %v", <-sigChan)
	}()

	go func() {
		logger.Sugar().Infof("HTTP server listening on %s", *httpAddr)
		errChan <- http.ListenAndServe(*httpAddr, handler)
	}()

	// 等待退出信号
	logger.Sugar().Infof("exiting: %v", <-errChan)
}