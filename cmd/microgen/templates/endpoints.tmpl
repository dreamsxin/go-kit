package {{.Service.PackageName}}

import (
	"context"

	"github.com/dreamsxin/go-kit/endpoint"
	idl "{{.ImportPath}}"
)

// Endpoints 封装所有服务端点
 type {{.Service.ServiceName}}Endpoints struct {
{{range .Service.Methods}}	{{.Name}}Endpoint endpoint.Endpoint
{{end}}
}

// MakeServerEndpoints 创建服务端端点
func MakeServerEndpoints(svc {{.Service.ServiceName}}) {{.Service.ServiceName}}Endpoints {
	return {{.Service.ServiceName}}Endpoints{
{{range .Service.Methods}}		{{.Name}}Endpoint: Make{{.Name}}Endpoint(svc),
{{end}}
	}
}

{{range .Service.Methods}}
// Make{{.Name}}Endpoint 创建单个端点
func Make{{.Name}}Endpoint(svc {{$.Service.ServiceName}}) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(idl.{{.Input}})
		resp, err := svc.{{.Name}}(ctx, req)
		if err != nil {
			return nil, err
		}
		return resp, nil
	}
}
{{end}}

// 客户端方法
{{range .Service.Methods}}
// {{.Name}} 调用服务端端点
func (e {{$.Service.ServiceName}}Endpoints) {{.Name}}(ctx context.Context, req idl.{{.Input}}) (idl.{{.Output}}, error) {
	resp, err := e.{{.Name}}Endpoint(ctx, req)
	if err != nil {
		return idl.{{.Output}}{}, err

	}
	return resp.(idl.{{.Output}}), nil
}
{{end}}